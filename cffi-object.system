;;; -*- Mode: LISP; Package: :cl-user; BASE: 10; Syntax: ANSI-Common-Lisp; -*-
;;;
;;;   Time-stamp: <>
;;;   Touched: Sun Jul 23 11:22:43 2023 +0530 <enometh@net.meer>
;;;   Bugs-To: enometh@net.meer
;;;   Status: Experimental.  Do not redistribute
;;;   Copyright (C) 2023 Madhu.  All Rights Reserved.
;;;
(in-package "CL-USER")

(defvar *cffi-object-source-dir*
  (merge-pathnames "Github/cffi-object/" (translate-logical-pathname "EXTERN:")))
(defvar *cffi-object-binary-dir* (binary-directory *cffi-object-source-dir*))

(mk:defsystem :cffi-object
  :source-pathname *cffi-object-source-dir*
  :binary-pathname *cffi-object-binary-dir*
  :source-extension "lisp"
  :depends-on (#:uiop #:alexandria #:cffi #:trivial-garbage)
  :components  ((:file "package")
		(:file "libc")
		(:file "type")
		(:file "definition")
		(:file "allocator")
		(:file "object")
		(:file "allocator-ecl" :if-feature :ecl)
		(:file "pointer")
		(:file "array")
		(:file "macros")
		(:file "defcfun")
		(:file "global")))

#+nil
(mk:oos :cffi-object :load :compile-during-load t)

(mk:defsystem :cffi-object.ops
  :source-pathname *cffi-object-source-dir*
  :binary-pathname *cffi-object-binary-dir*
  :source-extension "lisp"
  :depends-on (#:cffi-object #:cffi-ops)
  :components ((:file "ops")))

#+nil
(mk:oos :cffi-object.ops :load :compile-during-load t)

(mk:defsystem :cffi-object/test
  :source-pathname *cffi-object-source-dir*
  :binary-pathname *cffi-object-binary-dir*
  :source-extension "lisp"
  :depends-on (#:cffi-ops #:cffi-object #:cffi-object.ops #:parachute)
  :components ((:module "test"
		:components ((:file "package")))))

#+nil
(mk:oos :cffi-object/test :load :compile-during-load t)

#+nil
(parachute:test 'cffi-object.test:suite)



